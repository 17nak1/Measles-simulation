!function(e){var n={};function o(t){if(n[t])return n[t].exports;var l=n[t]={i:t,l:!1,exports:{}};return e[t].call(l.exports,l,l.exports,o),l.l=!0,l.exports}o.m=e,o.c=n,o.d=function(e,n,t){o.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:t})},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.t=function(e,n){if(1&n&&(e=o(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var t=Object.create(null);if(o.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var l in e)o.d(t,l,function(n){return e[n]}.bind(null,l));return t},o.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(n,"a",n),n},o.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},o.p="",o(o.s=0)}([function(e,n){const o=(e,n,...o)=>{e(...o);let t=document.createElement("pre");t.innerText=o.map(e=>"string"==typeof e?e:JSON.stringify(e,null,2)).join(" "),t.style.color=n,document.body.appendChild(t)};let t=console.log,l=console.error;console.log=o.bind(null,t,"black"),console.error=o.bind(null,l,"red"),document.addEventListener("DOMContentLoaded",()=>{fetch("js/worker-bundle.js").then(e=>e.text()).then(e=>{!function(e){let n,o;document.getElementById("file1-upload").onchange=function(){var e=this.files[0];o=[];var n=new FileReader;n.onload=function(){for(var e=this.result.split("\n"),n=1;n<e.length;n++)e[n].length&&o.push(e[n].split(","))},n.readAsText(e)},document.getElementById("file2-upload").onchange=function(){var e=this.files[0];n=[];var o=new FileReader;o.onload=function(){for(var e=this.result.split("\n"),o=1;o<e.length;o++)e[o].length&&n.push(e[o].split(","))},o.readAsText(e)};document.getElementById("go-button").onclick=function(){!async function(n,o){console.log("Deploying job...");let t=dcp.compute.do(n,e,o);t.public={name:"Measles-simulation"},t.work.on("console",e=>console.log("Got console event:",e)),t.work.on("uncaughtException",e=>console.error(e)),t.on("accepted",()=>{console.log("Job accepted")}),t.on("status",e=>{console.log("Got a status update:",e)}),t.on("cancel",e=>console.log("Job was cancelled",e)),t.on("result",e=>console.log("Got a result:",e));let l=await t.exec(dcp.compute.marketValue);console.log(l),console.log("Done.")}(2,[[{maxFail:500,dataCases:n,dataCovar:o,runSaveStates:1,parameters:{R0:31.3249,amplitude:.388362,gamma:73.05,mu:646983e-9,sigma:45.66,rho:.4598709,psi:.1462546,S_0:.03399189,E_0:.0002336327,I_0:4.221789e-7,R_0:.9657741},Np:1e4,dt:1/365.25,timeZero:1940}]])}}(`(async (...args) => {\n      ${e}\n      return await self.workerfn(...args);\n    })`)})})}]);